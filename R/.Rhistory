col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
x = test1[[j]][[i]]
print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
x = test1[[j]][[i]]
print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
x = test1[[j]][[i]]
print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
x = test1[[j]][[i]]
print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
x = test1[[j]][[i]]
print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
x = test1[[j]][[i]]
print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad[[j]]
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad[[j]]
lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad[[i]]
# lengt(col.mad)
}
}
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
length(col.mad)
for(j in 1:nrow(test1)) {
print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad[[i]]
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
length(col.mad)
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad[[i]]
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
print(i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
length(col.mad)
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
# print(j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
length(mads)
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", i)
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
print("j: ", j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", toString(i))
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
print("j: ", toString(j))
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
print("j: ", j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
cat("j: ", j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
length(test[,2])
length(test[,1])
dim(test1)
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
x = test1[[j]][[i]]
#cat("j: ", j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
cat("j: ", j, "\n")
x = test1[[j]][[i]]
#cat("j: ", j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[[i]]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
cat("j: ", j, "\n")
x = test1[[j]][[i]]
print(x)
#cat("j: ", j)
output[[j]][[i]] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
nrow(test1)
nrow(output)
ncol(test1)
length(mads)
test1[[10]][[10]]
test1[10][[10]]
test1[10][10]
test1[10,10]
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
cat("j: ", j, "\n")
x = test1[j][i]
print(x)
#cat("j: ", j)
output[j][i] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
#cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
cat("j: ", j, "\n")
x = test1[j][i]
#print(x)
#cat("j: ", j)
output[j][i] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
#cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
#print(test1[[j]][[i]])
cat("j: ", j, "\n")
x = test1[j][i]
#print(x)
#cat("j: ", j)
output[j][i] = (0.6745 * (x - col.med)) / col.mad
# lengt(col.mad)
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
x = test1[j][i]
print(x)
output[j][i] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
x = test1[j][i]
output[j][i] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
x = test1[j][i]
output[j][i] = (0.6745 * (x - col.med)) / col.mad
}
}
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[i]
print(i)
for(j in 1:nrow(test1)) {
x = test1[j][i]
output[j][i] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[i]
#print(i)
for(j in 1:nrow(test1)) {
x = test1[j][i]
print(j)
output[j][i] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
cat("i: ", i, "\n")
col = test1[,i]
print(length(col))
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
x = test1[j][i]
print(x)
output[j][i] = (0.6745 * (x - col.med)) / col.mad
}
}
test1 = CPathena[, -c(1,2)]
test1 = log(test1 + eps)
# apply function
mads = apply(test1, 2, mad)
output = data.frame(test1)
for(i in 1:ncol(test1)) {
col = test1[,i]
col.med = median(col)
col.mad = mads[i]
for(j in 1:nrow(test1)) {
x = test1[j,i]
output[j,i] = (0.6745 * (x - col.med)) / col.mad
}
}
output
